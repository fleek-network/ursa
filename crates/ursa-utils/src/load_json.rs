use anyhow::Context;
use serde::{de::DeserializeOwned, Serialize};

/// Load a json file from the given path or write the value generated by the default function to
/// the file.
pub fn load_or_create_json<T, P: AsRef<std::path::Path>, F>(
    path: P,
    default_fn: F,
) -> anyhow::Result<T>
where
    F: Fn() -> T,
    T: Serialize + DeserializeOwned,
{
    let path = path.as_ref();

    if path.exists() {
        let bytes =
            std::fs::read(path).with_context(|| format!("Could not read the file: '{path:?}'"))?;

        serde_json::from_slice(bytes.as_slice())
            .with_context(|| format!("Could not deserialize the file: '{path:?}'"))
    } else {
        let value = default_fn();
        let bytes = serde_json::to_vec_pretty(&value).context("Serialization failed.")?;

        let parent = path
            .parent()
            .context("Could not resolve the parent directory.")?;

        std::fs::create_dir_all(parent)
            .with_context(|| format!("Could not create the directory: '{parent:?}'"))?;

        std::fs::write(path, bytes).with_context(|| format!("Could not write to '{path:?}'."))?;

        Ok(value)
    }
}
