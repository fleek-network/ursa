name: rust-ci

env:
  RUST_BACKTRACE: 1

on:
  push:
    branches: [ "main" ]
    paths:
      - "crates/**"
      - "Cargo.toml"
      - ".github/workflows/rust.yml"
      - ".github/workflows/docker-publish.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "crates/**"
      - "Cargo.toml"
      - ".github/workflows/rust.yml"
      - ".github/workflows/docker-publish.yml"

jobs:
  tests:
    name: Matrix tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { rust: stable,           os: ubuntu-latest }
          - { rust: stable,           os: macos-latest }
          # - { rust: stable,           os: windows-latest }
          - { rust: beta,             os: ubuntu-latest }
          - { rust: nightly,          os: ubuntu-latest }
    steps:
      - uses: actions/checkout@master

      - name: Install Dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang ocl-icd-opencl-dev

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install protoc (macos-latest)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew update
          brew install protobuf
          protoc --version      

      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          profile: minimal
          components: rustc-dev, llvm-tools-preview

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - run: cargo test --workspace --all-features
      - run: cargo test --workspace --no-default-features

  coverage:
    name: Tests coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [nightly]
    env:
      CARGO_INCREMENTAL: '0'
      RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
      RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
    steps:
      - uses: actions/checkout@master

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang ocl-icd-opencl-dev

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          profile: minimal
          components: clippy

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
          
      - run: cargo test --workspace --all-features
      - run: cargo test --workspace --no-default-features

      - name: Setup grcov
        id: coverage
        uses: actions-rs/grcov@v0.1

      - name: grcov upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          file: ${{ steps.coverage.outputs.report }}

  clippy:
    name: Lint with clippy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
    env:
      RUSTFLAGS: -Dwarnings
    steps:
      - uses: actions/checkout@master

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang ocl-icd-opencl-dev

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          profile: minimal
          components: clippy

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - run: cargo clippy --workspace --all-targets
      - run: cargo clippy --workspace --all-targets --no-default-features
      - run: cargo clippy --workspace --all-targets --all-features

  rustfmt:
    name: Code formatting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
    steps:
      - uses: actions/checkout@master

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang ocl-icd-opencl-dev

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          profile: minimal
          components: rustfmt

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - run: cargo fmt --all -- --check