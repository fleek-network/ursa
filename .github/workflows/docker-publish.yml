name: docker-build-push

on:
  schedule:
    - cron: '43 2 * * *'
  push:
    branches: [ "main" ]
    paths:
      - "crates/**"
      - "Cargo.toml"
      - ".github/workflows/rust.yml"
      - ".github/workflows/docker-publish.yml"
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
    paths:
      - "crates/**"
      - "Cargo.toml"
      - ".github/workflows/rust.yml"
      - ".github/workflows/docker-publish.yml"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GATEWAY_IMAGE_NAME: ${{ github.repository }}-gateway

jobs:
  build:
    name: Docker build and publish ${{ matrix.make.name }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable]
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Install Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang ocl-icd-opencl-dev

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          profile: minimal

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-clippy-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata (ursa)
        id: ursa-meta
        uses: docker/metadata-action@v4.0.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image (ursa)
        id: ursa-build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.ursa-meta.outputs.tags }}
          labels: ${{ steps.ursa-meta.outputs.labels }}

      - name: Extract Docker metadata (ursa-gateway)
        id: ursa-gateway-meta
        uses: docker/metadata-action@v4.0.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.GATEWAY_IMAGE_NAME }}

      - name: Build and push Docker image (ursa-gateway)
        id: ursa-gateway-build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.ursa-gateway-meta.outputs.tags }}
          labels: ${{ steps.ursa-gateway-meta.outputs.labels }}
          file: ./docker/gateway-node/Dockerfile
